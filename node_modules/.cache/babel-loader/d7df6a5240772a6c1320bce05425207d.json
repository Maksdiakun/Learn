{"ast":null,"code":"import * as Yup from \"yup\";\n\nconst nameValid = value => /^[a-z ,.'-]+$/i.test(value);\n\nconst SchemaConfig = {\n  first_name: Yup.string().test(\"Name format\", \"First name format is not valid\", nameValid).required(\"Required\"),\n  last_name: Yup.string().test(\"Name format\", \"Last name format is not valid\", nameValid).required(\"Required\"),\n  email: Yup.string().required(\"Required\").email(\"Wrong email format\"),\n  password: Yup.string().required(\"Required\").min(8, \"Password must be at least 8 characters\"),\n  password2: Yup.string().required(\"Required\").oneOf([Yup.ref(\"password\"), null], \"Passwords must match\")\n};\n\nconst ValidationRules = initValues => {\n  const filtered = Object.keys(SchemaConfig).filter(key => Object.keys(initValues).includes(key)).reduce((obj, key) => {\n    obj[key] = SchemaConfig[key];\n    return obj;\n  }, {});\n  return Yup.object().shape(filtered);\n};\n\nexport default ValidationRules;","map":{"version":3,"sources":["/Users/mac/Desktop/Learn/src/helpers/ValidationRules.js"],"names":["Yup","nameValid","value","test","SchemaConfig","first_name","string","required","last_name","email","password","min","password2","oneOf","ref","ValidationRules","initValues","filtered","Object","keys","filter","key","includes","reduce","obj","object","shape"],"mappings":"AAAA,OAAO,KAAKA,GAAZ,MAAqB,KAArB;;AAEA,MAAMC,SAAS,GAAIC,KAAD,IAAW,iBAAiBC,IAAjB,CAAsBD,KAAtB,CAA7B;;AAEA,MAAME,YAAY,GAAG;AACnBC,EAAAA,UAAU,EAAEL,GAAG,CAACM,MAAJ,GACTH,IADS,CACJ,aADI,EACW,gCADX,EAC6CF,SAD7C,EAETM,QAFS,CAEA,UAFA,CADO;AAInBC,EAAAA,SAAS,EAAER,GAAG,CAACM,MAAJ,GACRH,IADQ,CACH,aADG,EACY,+BADZ,EAC6CF,SAD7C,EAERM,QAFQ,CAEC,UAFD,CAJQ;AAOnBE,EAAAA,KAAK,EAAET,GAAG,CAACM,MAAJ,GAAaC,QAAb,CAAsB,UAAtB,EAAkCE,KAAlC,CAAwC,oBAAxC,CAPY;AAQnBC,EAAAA,QAAQ,EAAEV,GAAG,CAACM,MAAJ,GACPC,QADO,CACE,UADF,EAEPI,GAFO,CAEH,CAFG,EAEA,wCAFA,CARS;AAWnBC,EAAAA,SAAS,EAAEZ,GAAG,CAACM,MAAJ,GACRC,QADQ,CACC,UADD,EAERM,KAFQ,CAEF,CAACb,GAAG,CAACc,GAAJ,CAAQ,UAAR,CAAD,EAAsB,IAAtB,CAFE,EAE2B,sBAF3B;AAXQ,CAArB;;AAgBA,MAAMC,eAAe,GAAIC,UAAD,IAAgB;AACtC,QAAMC,QAAQ,GAAGC,MAAM,CAACC,IAAP,CAAYf,YAAZ,EACdgB,MADc,CACNC,GAAD,IAASH,MAAM,CAACC,IAAP,CAAYH,UAAZ,EAAwBM,QAAxB,CAAiCD,GAAjC,CADF,EAEdE,MAFc,CAEP,CAACC,GAAD,EAAMH,GAAN,KAAc;AACpBG,IAAAA,GAAG,CAACH,GAAD,CAAH,GAAWjB,YAAY,CAACiB,GAAD,CAAvB;AACA,WAAOG,GAAP;AACD,GALc,EAKZ,EALY,CAAjB;AAMA,SAAOxB,GAAG,CAACyB,MAAJ,GAAaC,KAAb,CAAmBT,QAAnB,CAAP;AACD,CARD;;AASA,eAAeF,eAAf","sourcesContent":["import * as Yup from \"yup\";\n\nconst nameValid = (value) => /^[a-z ,.'-]+$/i.test(value);\n\nconst SchemaConfig = {\n  first_name: Yup.string()\n    .test(\"Name format\", \"First name format is not valid\", nameValid)\n    .required(\"Required\"),\n  last_name: Yup.string()\n    .test(\"Name format\", \"Last name format is not valid\", nameValid)\n    .required(\"Required\"),\n  email: Yup.string().required(\"Required\").email(\"Wrong email format\"),\n  password: Yup.string()\n    .required(\"Required\")\n    .min(8, \"Password must be at least 8 characters\"),\n  password2: Yup.string()\n    .required(\"Required\")\n    .oneOf([Yup.ref(\"password\"), null], \"Passwords must match\"),\n};\n\nconst ValidationRules = (initValues) => {\n  const filtered = Object.keys(SchemaConfig)\n    .filter((key) => Object.keys(initValues).includes(key))\n    .reduce((obj, key) => {\n      obj[key] = SchemaConfig[key];\n      return obj;\n    }, {});\n  return Yup.object().shape(filtered);\n};\nexport default ValidationRules;\n"]},"metadata":{},"sourceType":"module"}