{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Desktop/Learn/src/components/Captions/index.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchTextTranslate } from \"../../store/videoPage/video.actions\";\nimport { captionText, seconds } from \"../../helpers/generalHelpers\";\nimport \"./index.scss\";\n\nconst Captions = ({\n  videoTime = 0,\n  videoPlay\n}) => {\n  const {\n    id\n  } = useParams();\n  const {\n    subtitlesOriginal\n  } = useSelector(state => state.video.subtitles);\n  const [state, setState] = useState({\n    text: undefined\n  });\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (subtitlesOriginal) {\n      setState(() => {\n        const caption = captionText(subtitlesOriginal, videoTime);\n        return caption;\n      });\n    }\n  }, [subtitlesOriginal, videoTime]);\n\n  if (!subtitlesOriginal) {\n    return /*#__PURE__*/React.createElement(React.Fragment, null);\n  }\n\n  const selectText = () => {\n    const text = window.getSelection();\n    dispatch(fetchTextTranslate(text.toString(), seconds(state.start), id));\n  };\n\n  const funcStop = () => {\n    videoPlay();\n  };\n\n  return /*#__PURE__*/React.createElement(\"p\", {\n    className: \"captions\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    onSelect: selectText,\n    onMouseDown: funcStop,\n    onMouseUp: selectText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }, state === null || state === void 0 ? void 0 : state.text));\n};\n\nexport default Captions;","map":{"version":3,"sources":["/Users/mac/Desktop/Learn/src/components/Captions/index.js"],"names":["React","useEffect","useState","useParams","useDispatch","useSelector","fetchTextTranslate","captionText","seconds","Captions","videoTime","videoPlay","id","subtitlesOriginal","state","video","subtitles","setState","text","undefined","dispatch","caption","selectText","window","getSelection","toString","start","funcStop"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,SAAT,QAA0B,cAA1B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,kBAAT,QAAmC,qCAAnC;AACA,SAASC,WAAT,EAAsBC,OAAtB,QAAqC,8BAArC;AACA,OAAO,cAAP;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA,SAAS,GAAG,CAAd;AAAiBC,EAAAA;AAAjB,CAAD,KAAkC;AACjD,QAAM;AAAEC,IAAAA;AAAF,MAAST,SAAS,EAAxB;AACA,QAAM;AAAEU,IAAAA;AAAF,MAAwBR,WAAW,CAAES,KAAD,IAAWA,KAAK,CAACC,KAAN,CAAYC,SAAxB,CAAzC;AACA,QAAM,CAACF,KAAD,EAAQG,QAAR,IAAoBf,QAAQ,CAAC;AAAEgB,IAAAA,IAAI,EAAEC;AAAR,GAAD,CAAlC;AACA,QAAMC,QAAQ,GAAGhB,WAAW,EAA5B;AAEAH,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIY,iBAAJ,EAAuB;AACrBI,MAAAA,QAAQ,CAAC,MAAM;AACb,cAAMI,OAAO,GAAGd,WAAW,CAACM,iBAAD,EAAoBH,SAApB,CAA3B;AACA,eAAOW,OAAP;AACD,OAHO,CAAR;AAID;AACF,GAPQ,EAON,CAACR,iBAAD,EAAoBH,SAApB,CAPM,CAAT;;AASA,MAAI,CAACG,iBAAL,EAAwB;AACtB,wBAAO,yCAAP;AACD;;AAED,QAAMS,UAAU,GAAG,MAAM;AACvB,UAAMJ,IAAI,GAAGK,MAAM,CAACC,YAAP,EAAb;AACAJ,IAAAA,QAAQ,CAACd,kBAAkB,CAACY,IAAI,CAACO,QAAL,EAAD,EAAkBjB,OAAO,CAACM,KAAK,CAACY,KAAP,CAAzB,EAAwCd,EAAxC,CAAnB,CAAR;AACD,GAHD;;AAKA,QAAMe,QAAQ,GAAG,MAAM;AACrBhB,IAAAA,SAAS;AACV,GAFD;;AAIA,sBACE;AAAG,IAAA,SAAS,EAAC,UAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAM,IAAA,QAAQ,EAAEW,UAAhB;AAA4B,IAAA,WAAW,EAAEK,QAAzC;AAAmD,IAAA,SAAS,EAAEL,UAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGR,KADH,aACGA,KADH,uBACGA,KAAK,CAAEI,IADV,CADF,CADF;AAOD,CAnCD;;AAqCA,eAAeT,QAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchTextTranslate } from \"../../store/videoPage/video.actions\";\nimport { captionText, seconds } from \"../../helpers/generalHelpers\";\nimport \"./index.scss\";\n\nconst Captions = ({ videoTime = 0, videoPlay }) => {\n  const { id } = useParams();\n  const { subtitlesOriginal } = useSelector((state) => state.video.subtitles);\n  const [state, setState] = useState({ text: undefined });\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (subtitlesOriginal) {\n      setState(() => {\n        const caption = captionText(subtitlesOriginal, videoTime);\n        return caption;\n      });\n    }\n  }, [subtitlesOriginal, videoTime]);\n\n  if (!subtitlesOriginal) {\n    return <></>;\n  }\n\n  const selectText = () => {\n    const text = window.getSelection();\n    dispatch(fetchTextTranslate(text.toString(), seconds(state.start), id));\n  };\n\n  const funcStop = () => {\n    videoPlay();\n  };\n\n  return (\n    <p className=\"captions\">\n      <span onSelect={selectText} onMouseDown={funcStop} onMouseUp={selectText}>\n        {state?.text}\n      </span>\n    </p>\n  );\n};\n\nexport default Captions;\n"]},"metadata":{},"sourceType":"module"}