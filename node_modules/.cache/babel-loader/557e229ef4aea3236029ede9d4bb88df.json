{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Desktop/Learn/src/index.js\";\nimport axios from \"axios\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport App from \"./App/App\";\nimport store from \"./store\";\nimport API from \"./API\";\nReactDOM.render( /*#__PURE__*/React.createElement(Router, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 3\n  }\n}, /*#__PURE__*/React.createElement(Provider, {\n  store: store,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(App, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 7\n  }\n}))), document.getElementById(\"root\"));\naxios.interceptors.response.use(response => response, err => {\n  return new Promise((resolve, reject) => {\n    const originalReq = err.config;\n\n    if (err.response.status >= 401 && err.response.status < 404 && err.config && !err.config.__isRetryRequest) {\n      originalReq._retry = true;\n      let res = API.refreshToken().then(res => res.json()).then(res => {\n        localStorage.setItem(\"user\", JSON.stringify(res));\n        originalReq.headers[\"Authorization\"] = `Bearer ${res.access_token}`;\n        originalReq.headers[\"Device\"] = \"device\";\n        return axios(originalReq);\n      }).catch(err => {\n        console.log(\"fetch Err\", err);\n      });\n      resolve(res);\n    }\n\n    return Promise.reject(err);\n  });\n});","map":{"version":3,"sources":["/Users/mac/Desktop/Learn/src/index.js"],"names":["axios","React","ReactDOM","Provider","BrowserRouter","Router","App","store","API","render","document","getElementById","interceptors","response","use","err","Promise","resolve","reject","originalReq","config","status","__isRetryRequest","_retry","res","refreshToken","then","json","localStorage","setItem","JSON","stringify","headers","access_token","catch","console","log"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,aAAa,IAAIC,MAA1B,QAAwC,kBAAxC;AACA,OAAOC,GAAP,MAAgB,WAAhB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACAN,QAAQ,CAACO,MAAT,eACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACE,oBAAC,QAAD;AAAU,EAAA,KAAK,EAAEF,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF,CADF,CADF,EAMEG,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CANF;AASAX,KAAK,CAACY,YAAN,CAAmBC,QAAnB,CAA4BC,GAA5B,CACGD,QAAD,IAAcA,QADhB,EAEGE,GAAD,IAAS;AACP,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,UAAMC,WAAW,GAAGJ,GAAG,CAACK,MAAxB;;AACA,QACEL,GAAG,CAACF,QAAJ,CAAaQ,MAAb,IAAuB,GAAvB,IACAN,GAAG,CAACF,QAAJ,CAAaQ,MAAb,GAAsB,GADtB,IAEAN,GAAG,CAACK,MAFJ,IAGA,CAACL,GAAG,CAACK,MAAJ,CAAWE,gBAJd,EAKE;AACAH,MAAAA,WAAW,CAACI,MAAZ,GAAqB,IAArB;AACA,UAAIC,GAAG,GAAGhB,GAAG,CAACiB,YAAJ,GACPC,IADO,CACDF,GAAD,IAASA,GAAG,CAACG,IAAJ,EADP,EAEPD,IAFO,CAEDF,GAAD,IAAS;AACbI,QAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BC,IAAI,CAACC,SAAL,CAAeP,GAAf,CAA7B;AACAL,QAAAA,WAAW,CAACa,OAAZ,CAAoB,eAApB,IAAwC,UAASR,GAAG,CAACS,YAAa,EAAlE;AACAd,QAAAA,WAAW,CAACa,OAAZ,CAAoB,QAApB,IAAgC,QAAhC;AACA,eAAOhC,KAAK,CAACmB,WAAD,CAAZ;AACD,OAPO,EAQPe,KARO,CAQAnB,GAAD,IAAS;AACdoB,QAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBrB,GAAzB;AACD,OAVO,CAAV;AAYAE,MAAAA,OAAO,CAACO,GAAD,CAAP;AACD;;AAED,WAAOR,OAAO,CAACE,MAAR,CAAeH,GAAf,CAAP;AACD,GAzBM,CAAP;AA0BD,CA7BH","sourcesContent":["import axios from \"axios\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport App from \"./App/App\";\nimport store from \"./store\";\nimport API from \"./API\";\nReactDOM.render(\n  <Router>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </Router>,\n  document.getElementById(\"root\")\n);\n\naxios.interceptors.response.use(\n  (response) => response,\n  (err) => {\n    return new Promise((resolve, reject) => {\n      const originalReq = err.config;\n      if (\n        err.response.status >= 401 &&\n        err.response.status < 404 &&\n        err.config &&\n        !err.config.__isRetryRequest\n      ) {\n        originalReq._retry = true;\n        let res = API.refreshToken()\n          .then((res) => res.json())\n          .then((res) => {\n            localStorage.setItem(\"user\", JSON.stringify(res));\n            originalReq.headers[\"Authorization\"] = `Bearer ${res.access_token}`;\n            originalReq.headers[\"Device\"] = \"device\";\n            return axios(originalReq);\n          })\n          .catch((err) => {\n            console.log(\"fetch Err\", err);\n          });\n\n        resolve(res);\n      }\n\n      return Promise.reject(err);\n    });\n  }\n);\n"]},"metadata":{},"sourceType":"module"}