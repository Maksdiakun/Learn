{"ast":null,"code":"import { call, put, select } from \"redux-saga/effects\";\nimport constants from \"../constans\";\nimport API from \"../../API\";\nimport { getUserId as getUserIdAction } from \"./user.actions\";\nexport function* signUp(action) {\n  try {\n    const response = yield call(API.signUp, action.payload.user);\n    yield put({\n      type: constants.MESSAGE,\n      payload: response.response\n    });\n    action.payload.history.push(\"/auth/signin\");\n  } catch (error) {\n    yield put({\n      type: constants.MESSAGE,\n      payload: error.message\n    });\n  }\n}\nexport function* signIn(action) {\n  try {\n    let response = yield call(API.signIn, action.payload);\n    yield put({\n      type: constants.SIGN_IN_SUCCESS,\n      payload: response.data\n    });\n    localStorage.setItem(\"user\", JSON.stringify(response.data));\n    yield put(getUserIdAction());\n  } catch (error) {\n    console.log(error);\n  }\n}\nexport function* signInSoc({\n  payload\n}) {\n  console.log(\"signInSoc/payload\", payload);\n\n  try {\n    let response = yield call(API.signInSoc, payload);\n    console.log(\"signInSoc\", response);\n    yield put({\n      type: constants.SIGN_IN_SUCCESS,\n      payload: response.data\n    });\n    localStorage.setItem(\"user\", JSON.stringify(response.data));\n    yield put(getUserIdAction());\n  } catch (error) {\n    console.log(error);\n  }\n}\nexport function* signOut() {\n  try {\n    yield call(API.signOut);\n    yield put({\n      type: constants.SIGN_OUT_SUCCESS\n    });\n    localStorage.removeItem(\"user\");\n  } catch (error) {\n    console.log(error);\n  }\n}\nexport function* userCheck() {\n  const {\n    user: {\n      checked_token\n    }\n  } = yield select();\n\n  try {\n    yield call(API.userCheck);\n    console.log(\"userCheck/seccc\");\n    yield put({\n      type: constants.USER_CHECK_SUCCESS\n    });\n    yield put({\n      type: \"SECOND_QUERY\",\n      paylaod: true\n    });\n  } catch (error) {\n    if (checked_token) {\n      yield put({\n        type: constants.REFRESH_TOKEN\n      });\n    } else {\n      yield put({\n        type: constants.USER_CHECK_FAILED\n      });\n    }\n  }\n}\nexport function* refreshToken() {\n  const {\n    user\n  } = yield select();\n\n  try {\n    const res = yield call(API.refreshToken);\n    localStorage.setItem(\"user\", JSON.stringify(res.data));\n    yield put({\n      type: \"SECOND_QUERY\",\n      payload: false\n    });\n    yield put({\n      type: constants.USER_CHECK\n    });\n  } catch (error) {\n    console.log(\"refreshToken error\", error);\n    console.log(\"refreshToken error\", error.response);\n    console.log(\"refreshToken error\", error.result);\n    yield put({\n      type: constants.USER_CHECK_FAILED\n    });\n  }\n}\nexport function* getUserId() {\n  try {\n    let {\n      data\n    } = yield call(API.getUserId);\n    console.log(data);\n    yield put({\n      type: constants.USER_ID_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error.response);\n  }\n}\nexport function* resetPass({\n  payload\n}) {\n  try {\n    let res = yield call(API.resetPass, payload);\n  } catch (error) {\n    console.log(error.response);\n  }\n}","map":{"version":3,"sources":["/Users/mac/Desktop/Learn/src/store/user/user.sagas.js"],"names":["call","put","select","constants","API","getUserId","getUserIdAction","signUp","action","response","payload","user","type","MESSAGE","history","push","error","message","signIn","SIGN_IN_SUCCESS","data","localStorage","setItem","JSON","stringify","console","log","signInSoc","signOut","SIGN_OUT_SUCCESS","removeItem","userCheck","checked_token","USER_CHECK_SUCCESS","paylaod","REFRESH_TOKEN","USER_CHECK_FAILED","refreshToken","res","USER_CHECK","result","USER_ID_SUCCESS","resetPass"],"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,EAAoBC,MAApB,QAAkC,oBAAlC;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,GAAP,MAAgB,WAAhB;AACA,SAASC,SAAS,IAAIC,eAAtB,QAA6C,gBAA7C;AAEA,OAAO,UAAUC,MAAV,CAAiBC,MAAjB,EAAyB;AAC9B,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMT,IAAI,CAACI,GAAG,CAACG,MAAL,EAAaC,MAAM,CAACE,OAAP,CAAeC,IAA5B,CAA3B;AACA,UAAMV,GAAG,CAAC;AACRW,MAAAA,IAAI,EAAET,SAAS,CAACU,OADR;AAERH,MAAAA,OAAO,EAAED,QAAQ,CAACA;AAFV,KAAD,CAAT;AAIAD,IAAAA,MAAM,CAACE,OAAP,CAAeI,OAAf,CAAuBC,IAAvB,CAA4B,cAA5B;AACD,GAPD,CAOE,OAAOC,KAAP,EAAc;AACd,UAAMf,GAAG,CAAC;AACRW,MAAAA,IAAI,EAAET,SAAS,CAACU,OADR;AAERH,MAAAA,OAAO,EAAEM,KAAK,CAACC;AAFP,KAAD,CAAT;AAID;AACF;AAED,OAAO,UAAUC,MAAV,CAAiBV,MAAjB,EAAyB;AAC9B,MAAI;AACF,QAAIC,QAAQ,GAAG,MAAMT,IAAI,CAACI,GAAG,CAACc,MAAL,EAAaV,MAAM,CAACE,OAApB,CAAzB;AACA,UAAMT,GAAG,CAAC;AACRW,MAAAA,IAAI,EAAET,SAAS,CAACgB,eADR;AAERT,MAAAA,OAAO,EAAED,QAAQ,CAACW;AAFV,KAAD,CAAT;AAIAC,IAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BC,IAAI,CAACC,SAAL,CAAef,QAAQ,CAACW,IAAxB,CAA7B;AACA,UAAMnB,GAAG,CAACK,eAAe,EAAhB,CAAT;AACD,GARD,CAQE,OAAOU,KAAP,EAAc;AACdS,IAAAA,OAAO,CAACC,GAAR,CAAYV,KAAZ;AACD;AACF;AACD,OAAO,UAAUW,SAAV,CAAoB;AAAEjB,EAAAA;AAAF,CAApB,EAAiC;AACtCe,EAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiChB,OAAjC;;AACA,MAAI;AACF,QAAID,QAAQ,GAAG,MAAMT,IAAI,CAACI,GAAG,CAACuB,SAAL,EAAgBjB,OAAhB,CAAzB;AACAe,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBjB,QAAzB;AACA,UAAMR,GAAG,CAAC;AACRW,MAAAA,IAAI,EAAET,SAAS,CAACgB,eADR;AAERT,MAAAA,OAAO,EAAED,QAAQ,CAACW;AAFV,KAAD,CAAT;AAIAC,IAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BC,IAAI,CAACC,SAAL,CAAef,QAAQ,CAACW,IAAxB,CAA7B;AACA,UAAMnB,GAAG,CAACK,eAAe,EAAhB,CAAT;AACD,GATD,CASE,OAAOU,KAAP,EAAc;AACdS,IAAAA,OAAO,CAACC,GAAR,CAAYV,KAAZ;AACD;AACF;AACD,OAAO,UAAUY,OAAV,GAAoB;AACzB,MAAI;AACF,UAAM5B,IAAI,CAACI,GAAG,CAACwB,OAAL,CAAV;AACA,UAAM3B,GAAG,CAAC;AACRW,MAAAA,IAAI,EAAET,SAAS,CAAC0B;AADR,KAAD,CAAT;AAGAR,IAAAA,YAAY,CAACS,UAAb,CAAwB,MAAxB;AACD,GAND,CAME,OAAOd,KAAP,EAAc;AACdS,IAAAA,OAAO,CAACC,GAAR,CAAYV,KAAZ;AACD;AACF;AACD,OAAO,UAAUe,SAAV,GAAsB;AAC3B,QAAM;AACJpB,IAAAA,IAAI,EAAE;AAAEqB,MAAAA;AAAF;AADF,MAEF,MAAM9B,MAAM,EAFhB;;AAGA,MAAI;AACF,UAAMF,IAAI,CAACI,GAAG,CAAC2B,SAAL,CAAV;AACAN,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AAEA,UAAMzB,GAAG,CAAC;AACRW,MAAAA,IAAI,EAAET,SAAS,CAAC8B;AADR,KAAD,CAAT;AAGA,UAAMhC,GAAG,CAAC;AACRW,MAAAA,IAAI,EAAE,cADE;AAERsB,MAAAA,OAAO,EAAE;AAFD,KAAD,CAAT;AAID,GAXD,CAWE,OAAOlB,KAAP,EAAc;AACd,QAAIgB,aAAJ,EAAmB;AACjB,YAAM/B,GAAG,CAAC;AACRW,QAAAA,IAAI,EAAET,SAAS,CAACgC;AADR,OAAD,CAAT;AAGD,KAJD,MAIO;AACL,YAAMlC,GAAG,CAAC;AACRW,QAAAA,IAAI,EAAET,SAAS,CAACiC;AADR,OAAD,CAAT;AAGD;AACF;AACF;AAED,OAAO,UAAUC,YAAV,GAAyB;AAC9B,QAAM;AAAE1B,IAAAA;AAAF,MAAW,MAAMT,MAAM,EAA7B;;AACA,MAAI;AACF,UAAMoC,GAAG,GAAG,MAAMtC,IAAI,CAACI,GAAG,CAACiC,YAAL,CAAtB;AACAhB,IAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BC,IAAI,CAACC,SAAL,CAAec,GAAG,CAAClB,IAAnB,CAA7B;AACA,UAAMnB,GAAG,CAAC;AACRW,MAAAA,IAAI,EAAE,cADE;AAERF,MAAAA,OAAO,EAAE;AAFD,KAAD,CAAT;AAIA,UAAMT,GAAG,CAAC;AACRW,MAAAA,IAAI,EAAET,SAAS,CAACoC;AADR,KAAD,CAAT;AAGD,GAVD,CAUE,OAAOvB,KAAP,EAAc;AACdS,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCV,KAAlC;AACAS,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCV,KAAK,CAACP,QAAxC;AACAgB,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCV,KAAK,CAACwB,MAAxC;AAEA,UAAMvC,GAAG,CAAC;AACRW,MAAAA,IAAI,EAAET,SAAS,CAACiC;AADR,KAAD,CAAT;AAGD;AACF;AAED,OAAO,UAAU/B,SAAV,GAAsB;AAC3B,MAAI;AACF,QAAI;AAAEe,MAAAA;AAAF,QAAW,MAAMpB,IAAI,CAACI,GAAG,CAACC,SAAL,CAAzB;AACAoB,IAAAA,OAAO,CAACC,GAAR,CAAYN,IAAZ;AACA,UAAMnB,GAAG,CAAC;AACRW,MAAAA,IAAI,EAAET,SAAS,CAACsC,eADR;AAER/B,MAAAA,OAAO,EAAEU;AAFD,KAAD,CAAT;AAID,GAPD,CAOE,OAAOJ,KAAP,EAAc;AACdS,IAAAA,OAAO,CAACC,GAAR,CAAYV,KAAK,CAACP,QAAlB;AACD;AACF;AACD,OAAO,UAAUiC,SAAV,CAAoB;AAAEhC,EAAAA;AAAF,CAApB,EAAiC;AACtC,MAAI;AACF,QAAI4B,GAAG,GAAG,MAAMtC,IAAI,CAACI,GAAG,CAACsC,SAAL,EAAgBhC,OAAhB,CAApB;AACD,GAFD,CAEE,OAAOM,KAAP,EAAc;AACdS,IAAAA,OAAO,CAACC,GAAR,CAAYV,KAAK,CAACP,QAAlB;AACD;AACF","sourcesContent":["import { call, put, select } from \"redux-saga/effects\";\nimport constants from \"../constans\";\nimport API from \"../../API\";\nimport { getUserId as getUserIdAction } from \"./user.actions\";\n\nexport function* signUp(action) {\n  try {\n    const response = yield call(API.signUp, action.payload.user);\n    yield put({\n      type: constants.MESSAGE,\n      payload: response.response,\n    });\n    action.payload.history.push(\"/auth/signin\");\n  } catch (error) {\n    yield put({\n      type: constants.MESSAGE,\n      payload: error.message,\n    });\n  }\n}\n\nexport function* signIn(action) {\n  try {\n    let response = yield call(API.signIn, action.payload);\n    yield put({\n      type: constants.SIGN_IN_SUCCESS,\n      payload: response.data,\n    });\n    localStorage.setItem(\"user\", JSON.stringify(response.data));\n    yield put(getUserIdAction());\n  } catch (error) {\n    console.log(error);\n  }\n}\nexport function* signInSoc({ payload }) {\n  console.log(\"signInSoc/payload\", payload);\n  try {\n    let response = yield call(API.signInSoc, payload);\n    console.log(\"signInSoc\", response);\n    yield put({\n      type: constants.SIGN_IN_SUCCESS,\n      payload: response.data,\n    });\n    localStorage.setItem(\"user\", JSON.stringify(response.data));\n    yield put(getUserIdAction());\n  } catch (error) {\n    console.log(error);\n  }\n}\nexport function* signOut() {\n  try {\n    yield call(API.signOut);\n    yield put({\n      type: constants.SIGN_OUT_SUCCESS,\n    });\n    localStorage.removeItem(\"user\");\n  } catch (error) {\n    console.log(error);\n  }\n}\nexport function* userCheck() {\n  const {\n    user: { checked_token },\n  } = yield select();\n  try {\n    yield call(API.userCheck);\n    console.log(\"userCheck/seccc\");\n\n    yield put({\n      type: constants.USER_CHECK_SUCCESS,\n    });\n    yield put({\n      type: \"SECOND_QUERY\",\n      paylaod: true,\n    });\n  } catch (error) {\n    if (checked_token) {\n      yield put({\n        type: constants.REFRESH_TOKEN,\n      });\n    } else {\n      yield put({\n        type: constants.USER_CHECK_FAILED,\n      });\n    }\n  }\n}\n\nexport function* refreshToken() {\n  const { user } = yield select();\n  try {\n    const res = yield call(API.refreshToken);\n    localStorage.setItem(\"user\", JSON.stringify(res.data));\n    yield put({\n      type: \"SECOND_QUERY\",\n      payload: false,\n    });\n    yield put({\n      type: constants.USER_CHECK,\n    });\n  } catch (error) {\n    console.log(\"refreshToken error\", error);\n    console.log(\"refreshToken error\", error.response);\n    console.log(\"refreshToken error\", error.result);\n\n    yield put({\n      type: constants.USER_CHECK_FAILED,\n    });\n  }\n}\n\nexport function* getUserId() {\n  try {\n    let { data } = yield call(API.getUserId);\n    console.log(data);\n    yield put({\n      type: constants.USER_ID_SUCCESS,\n      payload: data,\n    });\n  } catch (error) {\n    console.log(error.response);\n  }\n}\nexport function* resetPass({ payload }) {\n  try {\n    let res = yield call(API.resetPass, payload);\n  } catch (error) {\n    console.log(error.response);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}