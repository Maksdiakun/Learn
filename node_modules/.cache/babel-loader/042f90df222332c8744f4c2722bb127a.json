{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Desktop/Learn/src/components/LangSelect/index.js\";\nimport React, { useEffect, useState, useRef } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchLanguages, setLanguage } from \"../../store/general/general.actions\";\nimport arrow from \"../../static/images/arrowDown.svg\";\n\nconst LangSelect = () => {\n  const dispatch = useDispatch();\n  const [state, setState] = useState({\n    labelText: \"\",\n    showOptionList: false,\n    optionsList: []\n  });\n  const {\n    languages,\n    language\n  } = useSelector(state => state.general);\n  useEffect(() => {\n    dispatch(fetchLanguages()); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  const blockRef = useRef(null);\n  useEffect(() => {\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    setState({\n      labelText: language\n    });\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []); // This method handles the click that happens outside the\n  // select text and list area\n\n  const handleClickOutside = event => {\n    if (blockRef.current && !blockRef.current.contains(event.target)) {\n      setState(prevState => {\n        return { ...prevState,\n          showOptionList: false\n        };\n      });\n    }\n  }; // This method handles the display of option list\n\n\n  const handleListDisplay = () => {\n    setState(prevState => {\n      return { ...prevState,\n        showOptionList: !prevState.showOptionList\n      };\n    });\n  }; // This method handles the setting of name in select text area\n  // and list display on selection\n\n\n  const handleOptionClick = el => () => {\n    setState({\n      labelText: el,\n      showOptionList: false\n    });\n    dispatch(setLanguage(el));\n  };\n\n  const {\n    showOptionList,\n    labelText\n  } = state;\n  return /*#__PURE__*/React.createElement(React.Fragment, null, languages && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"select_container\",\n    ref: blockRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: `select_label${showOptionList ? \" select_label_active\" : \"\"}\n          `,\n    onClick: handleListDisplay,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"your_label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 15\n    }\n  }, \"Your Language\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 15\n    }\n  }, labelText), /*#__PURE__*/React.createElement(\"img\", {\n    src: arrow,\n    alt: \"\",\n    className: \"arrow_img\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 15\n    }\n  }))), showOptionList && /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"select_options\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }\n  }, languages && languages.map(el => {\n    return /*#__PURE__*/React.createElement(\"li\", {\n      key: `language${el.id}`,\n      onClick: handleOptionClick(el.code),\n      className: labelText === el.title ? \"active_option\" : \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 21\n      }\n    }, el.title);\n  }))));\n};\n\nexport default LangSelect;","map":{"version":3,"sources":["/Users/mac/Desktop/Learn/src/components/LangSelect/index.js"],"names":["React","useEffect","useState","useRef","useDispatch","useSelector","fetchLanguages","setLanguage","LangSelect","dispatch","state","setState","labelText","showOptionList","optionsList","languages","language","general","blockRef","document","addEventListener","handleClickOutside","removeEventListener","event","current","contains","target","prevState","handleListDisplay","handleOptionClick","el","arrow","map","id","code","title"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  fetchLanguages,\n  setLanguage,\n} from \"../../store/general/general.actions\";\nimport arrow from \"../../static/images/arrowDown.svg\";\n\nconst LangSelect = () => {\n  const dispatch = useDispatch();\n  const [state, setState] = useState({\n    labelText: \"\",\n    showOptionList: false,\n    optionsList: [],\n  });\n  const { languages, language } = useSelector((state) => state.general);\n\n  useEffect(() => {\n    dispatch(fetchLanguages());\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const blockRef = useRef(null);\n\n  useEffect(() => {\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    setState({\n      labelText: language,\n    });\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // This method handles the click that happens outside the\n  // select text and list area\n  const handleClickOutside = (event) => {\n    if (blockRef.current && !blockRef.current.contains(event.target)) {\n      setState((prevState) => {\n        return {\n          ...prevState,\n          showOptionList: false,\n        };\n      });\n    }\n  };\n\n  // This method handles the display of option list\n  const handleListDisplay = () => {\n    setState((prevState) => {\n      return {\n        ...prevState,\n        showOptionList: !prevState.showOptionList,\n      };\n    });\n  };\n\n  // This method handles the setting of name in select text area\n  // and list display on selection\n  const handleOptionClick = (el) => () => {\n    setState({\n      labelText: el,\n      showOptionList: false,\n    });\n    dispatch(setLanguage(el));\n  };\n\n  const { showOptionList, labelText } = state;\n\n  return (\n    <>\n      {languages && (\n        <div className=\"select_container\" ref={blockRef}>\n          <div\n            className={`select_label${\n              showOptionList ? \" select_label_active\" : \"\"\n            }\n          `}\n            onClick={handleListDisplay}\n          >\n            <div>\n              <p className=\"your_label\">Your Language</p>\n              <p>{labelText}</p>\n              <img src={arrow} alt=\"\" className=\"arrow_img\" />\n            </div>\n          </div>\n          {showOptionList && (\n            <ul className=\"select_options\">\n              {languages &&\n                languages.map((el) => {\n                  return (\n                    <li\n                      key={`language${el.id}`}\n                      onClick={handleOptionClick(el.code)}\n                      className={labelText === el.title ? \"active_option\" : \"\"}\n                    >\n                      {el.title}\n                    </li>\n                  );\n                })}\n            </ul>\n          )}\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default LangSelect;\n"]},"metadata":{},"sourceType":"module"}