{"ast":null,"code":"import { call, put, select } from \"redux-saga/effects\";\nimport constants from \"../constans\";\nimport API from \"../../API\";\nexport function* videoLang({\n  payload\n}) {\n  try {\n    yield put({\n      type: constants.VIDEO_LANG_SUCCESS,\n      payload: payload.lang\n    });\n    yield put({\n      type: constants.SUBTITLES_REQUEST,\n      payload: payload.id\n    });\n  } catch (error) {\n    yield put({\n      type: constants.MESSAGE\n    });\n  }\n}\nexport function* saveVideoToDB({\n  payload\n}) {\n  try {\n    const {\n      data\n    } = yield call(API.saveVideoToDB, payload);\n    yield put({\n      type: constants.SAVE_TO_DB_SUCCESS,\n      payload: data.id\n    });\n  } catch (error) {\n    yield put({\n      type: constants.MESSAGE,\n      payload: error\n    });\n  }\n}\nexport function* VideoWatch({\n  payload\n}) {\n  try {\n    const res = yield API.getVideoDetails(payload);\n    const title = res.data.items[0].snippet.title;\n    const url = res.data.items[0].snippet.thumbnails.standard.url;\n    yield put({\n      type: constants.SAVE_TO_DB_REQUEST,\n      payload: {\n        id: payload,\n        title,\n        url\n      }\n    });\n  } catch (error) {\n    console.log(error);\n  }\n}\nexport function* getVideoLanguage({\n  payload\n}) {\n  yield put({\n    type: constants.GET_VIDEO_LANGUAGE_FETCHED\n  });\n\n  try {\n    var _data$items, _data$items$, _data$items$$snippet;\n\n    const {\n      data\n    } = yield call(API.getVideoLanguage, payload);\n    yield put({\n      type: constants.GET_VIDEO_LANGUAGE_SUCCESS,\n      payload: (_data$items = data.items) === null || _data$items === void 0 ? void 0 : (_data$items$ = _data$items[0]) === null || _data$items$ === void 0 ? void 0 : (_data$items$$snippet = _data$items$.snippet) === null || _data$items$$snippet === void 0 ? void 0 : _data$items$$snippet.defaultLanguage\n    });\n  } catch (error) {\n    yield put({\n      type: constants.GET_VIDEO_LANGUAGE_ERROR,\n      payload: error\n    });\n  }\n}\nexport function* fetchSubtitles({\n  payload\n}) {\n  try {\n    const state = yield select();\n    let lang = state.video.subtitles.languages.original_lang;\n    lang = lang === \"en-US\" || lang === \"en-GB\" ? \"en\" : lang;\n    console.log(lang);\n    const obj = {\n      id: payload.id,\n      from: payload.from || lang,\n      to: state.general.language\n    };\n    const {\n      data\n    } = yield call(API.getSubtitles, obj);\n    yield put({\n      type: constants.SUBTITLES_SUCCESS,\n      payload: {\n        languages: data[0],\n        subtitlesOriginal: data[1].original,\n        subtitlesTranslated: data[2].translation,\n        videoLanguages: data[0].all_langs_translated\n      }\n    });\n  } catch (error) {\n    yield put({\n      type: constants.MESSAGE\n    });\n  }\n}\nexport function* fetchTranslate(action) {\n  try {\n    const state = yield select();\n    let lang = state.video.subtitles.languages.original_lang;\n    lang = lang === \"en-US\" || lang === \"en-GB\" ? \"en\" : lang;\n    const obj = {\n      text: action.payload.text,\n      from: lang,\n      to: state.video.subtitles.languages.translated_to\n    };\n    const {\n      data\n    } = yield call(API.textTranslate, obj);\n    yield put({\n      type: constants.TEXT_TRANSLATE_SUCCESS,\n      payload: {\n        original: action.payload.text,\n        translated: data.text,\n        time: action.payload.time,\n        from_lang: obj.from,\n        to_lang: obj.to,\n        youtube_id: action.payload.id\n      }\n    });\n  } catch (error) {\n    yield put({\n      type: constants.MESSAGE,\n      payload: error.message\n    });\n  }\n}","map":{"version":3,"sources":["/Users/mac/Desktop/Learn/src/store/videoPage/video.sagas.js"],"names":["call","put","select","constants","API","videoLang","payload","type","VIDEO_LANG_SUCCESS","lang","SUBTITLES_REQUEST","id","error","MESSAGE","saveVideoToDB","data","SAVE_TO_DB_SUCCESS","VideoWatch","res","getVideoDetails","title","items","snippet","url","thumbnails","standard","SAVE_TO_DB_REQUEST","console","log","getVideoLanguage","GET_VIDEO_LANGUAGE_FETCHED","GET_VIDEO_LANGUAGE_SUCCESS","defaultLanguage","GET_VIDEO_LANGUAGE_ERROR","fetchSubtitles","state","video","subtitles","languages","original_lang","obj","from","to","general","language","getSubtitles","SUBTITLES_SUCCESS","subtitlesOriginal","original","subtitlesTranslated","translation","videoLanguages","all_langs_translated","fetchTranslate","action","text","translated_to","textTranslate","TEXT_TRANSLATE_SUCCESS","translated","time","from_lang","to_lang","youtube_id","message"],"mappings":"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","sourcesContent":["import { call, put, select } from \"redux-saga/effects\";\nimport constants from \"../constans\";\nimport API from \"../../API\";\n\nexport function* videoLang({ payload }) {\n  try {\n    yield put({\n      type: constants.VIDEO_LANG_SUCCESS,\n      payload: payload.lang,\n    });\n    yield put({\n      type: constants.SUBTITLES_REQUEST,\n      payload: payload.id,\n    });\n  } catch (error) {\n    yield put({\n      type: constants.MESSAGE,\n    });\n  }\n}\nexport function* saveVideoToDB({ payload }) {\n  try {\n    const { data } = yield call(API.saveVideoToDB, payload);\n    yield put({\n      type: constants.SAVE_TO_DB_SUCCESS,\n      payload: data.id,\n    });\n  } catch (error) {\n    yield put({\n      type: constants.MESSAGE,\n      payload: error,\n    });\n  }\n}\nexport function* VideoWatch({ payload }) {\n  try {\n    const res = yield API.getVideoDetails(payload);\n    const title = res.data.items[0].snippet.title;\n    const url = res.data.items[0].snippet.thumbnails.standard.url;\n    yield put({\n      type: constants.SAVE_TO_DB_REQUEST,\n      payload: { id: payload, title, url },\n    });\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport function* getVideoLanguage({ payload }) {\n  yield put({\n    type: constants.GET_VIDEO_LANGUAGE_FETCHED,\n  });\n\n  try {\n    const { data } = yield call(API.getVideoLanguage, payload);\n\n    yield put({\n      type: constants.GET_VIDEO_LANGUAGE_SUCCESS,\n      payload: data.items?.[0]?.snippet?.defaultLanguage,\n    });\n  } catch (error) {\n    yield put({\n      type: constants.GET_VIDEO_LANGUAGE_ERROR,\n      payload: error,\n    });\n  }\n}\n\nexport function* fetchSubtitles({ payload }) {\n  try {\n    const state = yield select();\n    let lang = state.video.subtitles.languages.original_lang;\n    lang = lang === \"en-US\" || lang === \"en-GB\" ? \"en\" : lang;\n    console.log(lang);\n    const obj = {\n      id: payload.id,\n      from: payload.from || lang,\n      to: state.general.language,\n    };\n    const { data } = yield call(API.getSubtitles, obj);\n    yield put({\n      type: constants.SUBTITLES_SUCCESS,\n      payload: {\n        languages: data[0],\n        subtitlesOriginal: data[1].original,\n        subtitlesTranslated: data[2].translation,\n        videoLanguages: data[0].all_langs_translated,\n      },\n    });\n  } catch (error) {\n    yield put({\n      type: constants.MESSAGE,\n    });\n  }\n}\n\nexport function* fetchTranslate(action) {\n  try {\n    const state = yield select();\n    let lang = state.video.subtitles.languages.original_lang;\n    lang = lang === \"en-US\" || lang === \"en-GB\" ? \"en\" : lang;\n    const obj = {\n      text: action.payload.text,\n      from: lang,\n      to: state.video.subtitles.languages.translated_to,\n    };\n    const { data } = yield call(API.textTranslate, obj);\n    yield put({\n      type: constants.TEXT_TRANSLATE_SUCCESS,\n      payload: {\n        original: action.payload.text,\n        translated: data.text,\n        time: action.payload.time,\n        from_lang: obj.from,\n        to_lang: obj.to,\n        youtube_id: action.payload.id,\n      },\n    });\n  } catch (error) {\n    yield put({\n      type: constants.MESSAGE,\n      payload: error.message,\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}