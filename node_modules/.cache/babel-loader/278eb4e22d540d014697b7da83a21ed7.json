{"ast":null,"code":"import axios from \"axios\";\nexport const seconds = sec => {\n  const minutes = Math.floor(sec / 60);\n  const seconds = (sec % 60).toFixed(0);\n  return minutes + \":\" + (seconds < 10 ? \"0\" : \"\") + seconds;\n};\nexport const fiterSubtitles = (arr, videoTime) => {\n  const filteredArr = arr.filter(el => videoTime >= +el.start);\n  const subtitles = filteredArr.map(el => ({ ...el,\n    start: seconds(el.start)\n  }));\n  return [...subtitles].reverse();\n};\nexport const captionText = (arr, videoTime) => {\n  const a = arr.filter(el => videoTime >= +el.start);\n\n  if (a.length > 0) {\n    return a[a.length - 1];\n  }\n};\nexport const escapeHtml = text => {\n  if (!text) return;\n  var map = {\n    \"&\": \"&amp;\",\n    \"<\": \"&lt;\",\n    \">\": \"&gt;\",\n    '\"': \"&quot;\",\n    \"'\": \"&#39;\"\n  };\n\n  for (let key in map) {\n    const reg = new RegExp(map[key], \"g\");\n    text = text.replace(reg, key);\n  }\n\n  return text;\n};\nexport const cutString = str => {\n  if (!str) return;\n  let res;\n\n  if (str.length > 47) {\n    let cutted = str.slice(0, 47);\n    let last = cutted.lastIndexOf(\" \");\n    res = cutted.slice(0, last);\n    return res + \"...\";\n  }\n\n  return str;\n};","map":{"version":3,"sources":["/Users/mac/Desktop/Learn/src/helpers/generalHelpers.js"],"names":["axios","seconds","sec","minutes","Math","floor","toFixed","fiterSubtitles","arr","videoTime","filteredArr","filter","el","start","subtitles","map","reverse","captionText","a","length","escapeHtml","text","key","reg","RegExp","replace","cutString","str","res","cutted","slice","last","lastIndexOf"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,OAAO,GAAIC,GAAD,IAAS;AAC9B,QAAMC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWH,GAAG,GAAG,EAAjB,CAAhB;AACA,QAAMD,OAAO,GAAG,CAACC,GAAG,GAAG,EAAP,EAAWI,OAAX,CAAmB,CAAnB,CAAhB;AACA,SAAOH,OAAO,GAAG,GAAV,IAAiBF,OAAO,GAAG,EAAV,GAAe,GAAf,GAAqB,EAAtC,IAA4CA,OAAnD;AACD,CAJM;AAMP,OAAO,MAAMM,cAAc,GAAG,CAACC,GAAD,EAAMC,SAAN,KAAoB;AAChD,QAAMC,WAAW,GAAGF,GAAG,CAACG,MAAJ,CAAYC,EAAD,IAAQH,SAAS,IAAI,CAACG,EAAE,CAACC,KAApC,CAApB;AACA,QAAMC,SAAS,GAAGJ,WAAW,CAACK,GAAZ,CAAiBH,EAAD,KAAS,EACzC,GAAGA,EADsC;AAEzCC,IAAAA,KAAK,EAAEZ,OAAO,CAACW,EAAE,CAACC,KAAJ;AAF2B,GAAT,CAAhB,CAAlB;AAIA,SAAO,CAAC,GAAGC,SAAJ,EAAeE,OAAf,EAAP;AACD,CAPM;AASP,OAAO,MAAMC,WAAW,GAAG,CAACT,GAAD,EAAMC,SAAN,KAAoB;AAC7C,QAAMS,CAAC,GAAGV,GAAG,CAACG,MAAJ,CAAYC,EAAD,IAAQH,SAAS,IAAI,CAACG,EAAE,CAACC,KAApC,CAAV;;AACA,MAAIK,CAAC,CAACC,MAAF,GAAW,CAAf,EAAkB;AAChB,WAAOD,CAAC,CAACA,CAAC,CAACC,MAAF,GAAW,CAAZ,CAAR;AACD;AACF,CALM;AAOP,OAAO,MAAMC,UAAU,GAAIC,IAAD,IAAU;AAClC,MAAI,CAACA,IAAL,EAAW;AAEX,MAAIN,GAAG,GAAG;AACR,SAAK,OADG;AAER,SAAK,MAFG;AAGR,SAAK,MAHG;AAIR,SAAK,QAJG;AAKR,SAAK;AALG,GAAV;;AAOA,OAAK,IAAIO,GAAT,IAAgBP,GAAhB,EAAqB;AACnB,UAAMQ,GAAG,GAAG,IAAIC,MAAJ,CAAWT,GAAG,CAACO,GAAD,CAAd,EAAqB,GAArB,CAAZ;AACAD,IAAAA,IAAI,GAAGA,IAAI,CAACI,OAAL,CAAaF,GAAb,EAAkBD,GAAlB,CAAP;AACD;;AACD,SAAOD,IAAP;AACD,CAfM;AAiBP,OAAO,MAAMK,SAAS,GAAIC,GAAD,IAAS;AAChC,MAAI,CAACA,GAAL,EAAU;AACV,MAAIC,GAAJ;;AACA,MAAID,GAAG,CAACR,MAAJ,GAAa,EAAjB,EAAqB;AACnB,QAAIU,MAAM,GAAGF,GAAG,CAACG,KAAJ,CAAU,CAAV,EAAa,EAAb,CAAb;AACA,QAAIC,IAAI,GAAGF,MAAM,CAACG,WAAP,CAAmB,GAAnB,CAAX;AAEAJ,IAAAA,GAAG,GAAGC,MAAM,CAACC,KAAP,CAAa,CAAb,EAAgBC,IAAhB,CAAN;AAEA,WAAOH,GAAG,GAAG,KAAb;AACD;;AAED,SAAOD,GAAP;AACD,CAbM","sourcesContent":["import axios from \"axios\";\n\nexport const seconds = (sec) => {\n  const minutes = Math.floor(sec / 60);\n  const seconds = (sec % 60).toFixed(0);\n  return minutes + \":\" + (seconds < 10 ? \"0\" : \"\") + seconds;\n};\n\nexport const fiterSubtitles = (arr, videoTime) => {\n  const filteredArr = arr.filter((el) => videoTime >= +el.start);\n  const subtitles = filteredArr.map((el) => ({\n    ...el,\n    start: seconds(el.start),\n  }));\n  return [...subtitles].reverse();\n};\n\nexport const captionText = (arr, videoTime) => {\n  const a = arr.filter((el) => videoTime >= +el.start);\n  if (a.length > 0) {\n    return a[a.length - 1];\n  }\n};\n\nexport const escapeHtml = (text) => {\n  if (!text) return;\n\n  var map = {\n    \"&\": \"&amp;\",\n    \"<\": \"&lt;\",\n    \">\": \"&gt;\",\n    '\"': \"&quot;\",\n    \"'\": \"&#39;\",\n  };\n  for (let key in map) {\n    const reg = new RegExp(map[key], \"g\");\n    text = text.replace(reg, key);\n  }\n  return text;\n};\n\nexport const cutString = (str) => {\n  if (!str) return;\n  let res;\n  if (str.length > 47) {\n    let cutted = str.slice(0, 47);\n    let last = cutted.lastIndexOf(\" \");\n\n    res = cutted.slice(0, last);\n\n    return res + \"...\";\n  }\n\n  return str;\n};\n"]},"metadata":{},"sourceType":"module"}